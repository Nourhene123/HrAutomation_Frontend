/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { apiApplicationApplicationIdAcceptPut } from '../fn/application/api-application-application-id-accept-put';
import { ApiApplicationApplicationIdAcceptPut$Params } from '../fn/application/api-application-application-id-accept-put';
import { apiApplicationApplicationIdCancelDelete } from '../fn/application/api-application-application-id-cancel-delete';
import { ApiApplicationApplicationIdCancelDelete$Params } from '../fn/application/api-application-application-id-cancel-delete';
import { apiApplicationApplicationIdRejectPut } from '../fn/application/api-application-application-id-reject-put';
import { ApiApplicationApplicationIdRejectPut$Params } from '../fn/application/api-application-application-id-reject-put';
import { apiApplicationApplyPost } from '../fn/application/api-application-apply-post';
import { ApiApplicationApplyPost$Params } from '../fn/application/api-application-apply-post';
import { apiApplicationOfferJobOfferIdCandidatesGet } from '../fn/application/api-application-offer-job-offer-id-candidates-get';
import { ApiApplicationOfferJobOfferIdCandidatesGet$Params } from '../fn/application/api-application-offer-job-offer-id-candidates-get';
import { CandidatDto } from '../models/candidat-dto';
import { ApplicationResponseDto } from '../models/application-response-dto';
import { apiApplicationGetForCandidate } from '../fn/application/apiApplicationGetForCandidate';
import { ApplicationDtoPost } from '../models/application-dto-post';

@Injectable({ providedIn: 'root' })
export class ApplicationService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `apiApplicationApplyPost()` */
  static readonly ApiApplicationApplyPostPath = '/api/Application/apply';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiApplicationApplyPost()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  apiApplicationApplyPost$Response(params: ApiApplicationApplyPost$Params, context?: HttpContext): Observable<StrictHttpResponse<{ Message: string; ApplicationId: string }>> {
    if (!params?.body) {
      throw new Error('Application data is required');
    }

    const validatedParams: { body: ApplicationDtoPost } = {
      body: {
        CandidatId: params.body.CandidatId || '',
        JobOfferId: params.body.JobOfferId || ''
      }
    };

    if (!validatedParams.body.CandidatId) {
      throw new Error('CandidatId is required');
    }
    if (!validatedParams.body.JobOfferId) {
      throw new Error('JobOfferId is required');
    }

    return apiApplicationApplyPost(this.http, this.rootUrl, validatedParams, context);
  
  }
  
  apiApplicationApplyPost(params: ApiApplicationApplyPost$Params, context?: HttpContext): Observable<{ Message: string; ApplicationId: string }> {
    return this.apiApplicationApplyPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<{ Message: string; ApplicationId: string }>) => r.body)
    );
  }


  /** Path part for operation `apiApplicationOfferJobOfferIdCandidatesGet()` */
  static readonly ApiApplicationOfferJobOfferIdCandidatesGetPath = '/api/Application/offer/{jobOfferId}/candidates';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiApplicationOfferJobOfferIdCandidatesGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiApplicationOfferJobOfferIdCandidatesGet$Response(params: ApiApplicationOfferJobOfferIdCandidatesGet$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<ApplicationResponseDto>>> {
    return apiApplicationOfferJobOfferIdCandidatesGet(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiApplicationOfferJobOfferIdCandidatesGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiApplicationOfferJobOfferIdCandidatesGet(params: ApiApplicationOfferJobOfferIdCandidatesGet$Params, context?: HttpContext): Observable<Array<ApplicationResponseDto>> {
    return this.apiApplicationOfferJobOfferIdCandidatesGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<ApplicationResponseDto>>): Array<ApplicationResponseDto> => r.body)
    );
  }

  /** Path part for operation `apiApplicationApplicationIdCancelDelete()` */
  static readonly ApiApplicationApplicationIdCancelDeletePath = '/api/Application/{applicationId}/cancel';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiApplicationApplicationIdCancelDelete()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiApplicationApplicationIdCancelDelete$Response(params: ApiApplicationApplicationIdCancelDelete$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return apiApplicationApplicationIdCancelDelete(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiApplicationApplicationIdCancelDelete$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiApplicationApplicationIdCancelDelete(params: ApiApplicationApplicationIdCancelDelete$Params, context?: HttpContext): Observable<string> {
    return this.apiApplicationApplicationIdCancelDelete$Response(params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

  /** Path part for operation `apiApplicationApplicationIdAcceptPut()` */
  static readonly ApiApplicationApplicationIdAcceptPutPath = '/api/Application/{applicationId}/accept';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiApplicationApplicationIdAcceptPut()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiApplicationApplicationIdAcceptPut$Response(params: ApiApplicationApplicationIdAcceptPut$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return apiApplicationApplicationIdAcceptPut(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiApplicationApplicationIdAcceptPut$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiApplicationApplicationIdAcceptPut(params: ApiApplicationApplicationIdAcceptPut$Params, context?: HttpContext): Observable<string> {
    return this.apiApplicationApplicationIdAcceptPut$Response(params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

  /** Path part for operation `apiApplicationApplicationIdRejectPut()` */
  static readonly ApiApplicationApplicationIdRejectPutPath = '/api/Application/{applicationId}/reject';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiApplicationApplicationIdRejectPut()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiApplicationApplicationIdRejectPut$Response(params: ApiApplicationApplicationIdRejectPut$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return apiApplicationApplicationIdRejectPut(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiApplicationApplicationIdRejectPut$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiApplicationApplicationIdRejectPut(params: ApiApplicationApplicationIdRejectPut$Params, context?: HttpContext): Observable<string> {
    return this.apiApplicationApplicationIdRejectPut$Response(params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }


  // Get applications for the connected condidat
  apiApplicationGetApplicationCandidat(context?: HttpContext): Observable<ApplicationResponseDto[]> {
    return this.method1$Response(context).pipe(
      map((r: StrictHttpResponse<ApplicationResponseDto[]>) => r.body)
    );
  }

  private method1$Response(context?: HttpContext): Observable<StrictHttpResponse<ApplicationResponseDto[]>> {
    return apiApplicationGetForCandidate(this.http, this.rootUrl, context);
  }


}
