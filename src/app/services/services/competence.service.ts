/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { apiCompetenceCompetencesGet } from '../fn/competence/api-competence-competences-get';
import { ApiCompetenceCompetencesGet$Params } from '../fn/competence/api-competence-competences-get';
import { apiCompetenceCompetencesPost } from '../fn/competence/api-competence-competences-post';
import { ApiCompetenceCompetencesPost$Params } from '../fn/competence/api-competence-competences-post';
import { CompetenceDto } from '../models/competence-dto';

@Injectable({ providedIn: 'root' })
export class CompetenceService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `apiCompetenceCompetencesGet()` */
  static readonly ApiCompetenceCompetencesGetPath = '/api/Competence/competences';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiCompetenceCompetencesGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiCompetenceCompetencesGet$Response(params?: ApiCompetenceCompetencesGet$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<CompetenceDto>>> {
    return apiCompetenceCompetencesGet(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiCompetenceCompetencesGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiCompetenceCompetencesGet(params?: ApiCompetenceCompetencesGet$Params, context?: HttpContext): Observable<Array<CompetenceDto>> {
    return this.apiCompetenceCompetencesGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<CompetenceDto>>): Array<CompetenceDto> => r.body)
    );
  }

  /** Path part for operation `apiCompetenceCompetencesPost()` */
  static readonly ApiCompetenceCompetencesPostPath = '/api/Competence/competences';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiCompetenceCompetencesPost()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  apiCompetenceCompetencesPost$Response(params?: ApiCompetenceCompetencesPost$Params, context?: HttpContext): Observable<StrictHttpResponse<CompetenceDto>> {
    return apiCompetenceCompetencesPost(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiCompetenceCompetencesPost$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  apiCompetenceCompetencesPost(params?: ApiCompetenceCompetencesPost$Params, context?: HttpContext): Observable<CompetenceDto> {
    return this.apiCompetenceCompetencesPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<CompetenceDto>): CompetenceDto => r.body)
    );
  }

}
