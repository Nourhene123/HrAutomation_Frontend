/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { apiUserManagementGet } from '../fn/user-managment/api-user-managment-get';
import { ApiUserManagementGet$Params } from '../fn/user-managment/api-user-managment-get'; 
import { apiUserManagementIdDelete } from '../fn/user-managment/api-user-managment-id-delete'; 
import { ApiUserManagementIdDelete$Params } from '../fn/user-managment/api-user-managment-id-delete'; 
import { apiUserManagementIdGet } from '../fn/user-managment/api-user-managment-id-get'; 
import { ApiUserManagementIdGet$Params } from '../fn/user-managment/api-user-managment-id-get'; 
import { apiUserManagementIdPut } from '../fn/user-managment/api-user-managment-id-put'; 
import { ApiUserManagementIdPut$Params } from '../fn/user-managment/api-user-managment-id-put'; 
import { UserDto } from '../models/user-dto';

@Injectable({ providedIn: 'root' })
export class UserManagementService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `apiUserManagementGet()` */
  static readonly ApiUserManagementGetPath = '/api/UserManagement';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiUserManagementGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiUserManagementGet$Response(params?: ApiUserManagementGet$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<UserDto>>> {
    return apiUserManagementGet(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiUserManagementGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiUserManagementGet(params?: ApiUserManagementGet$Params, context?: HttpContext): Observable<Array<UserDto>> {
    return this.apiUserManagementGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<UserDto>>): Array<UserDto> => r.body)
    );
  }

  /** Path part for operation `apiUserManagementIdGet()` */
  static readonly ApiUserManagementIdGetPath = '/api/UserManagement/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiUserManagementIdGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiUserManagementIdGet$Response(params: ApiUserManagementIdGet$Params, context?: HttpContext): Observable<StrictHttpResponse<UserDto>> {
    return apiUserManagementIdGet(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiUserManagementIdGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiUserManagementIdGet(params: ApiUserManagementIdGet$Params, context?: HttpContext): Observable<UserDto> {
    return this.apiUserManagementIdGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<UserDto>): UserDto => r.body)
    );
  }

  /** Path part for operation `apiUserManagementIdPut()` */
  static readonly ApiUserManagementIdPutPath = '/api/UserManagement/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiUserManagementIdPut()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  apiUserManagementIdPut$Response(params: ApiUserManagementIdPut$Params, context?: HttpContext): Observable<StrictHttpResponse<UserDto>> {
    return apiUserManagementIdPut(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiUserManagementIdPut$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  apiUserManagementIdPut(params: ApiUserManagementIdPut$Params, context?: HttpContext): Observable<UserDto> {
    return this.apiUserManagementIdPut$Response(params, context).pipe(
      map((r: StrictHttpResponse<UserDto>): UserDto => r.body)
    );
  }

  /** Path part for operation `apiUserManagementIdDelete()` */
  static readonly ApiUserManagementIdDeletePath = '/api/UserManagement/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiUserManagementIdDelete()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiUserManagementIdDelete$Response(params: ApiUserManagementIdDelete$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return apiUserManagementIdDelete(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiUserManagementIdDelete$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiUserManagementIdDelete(params: ApiUserManagementIdDelete$Params, context?: HttpContext): Observable<string> {
    return this.apiUserManagementIdDelete$Response(params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

}
